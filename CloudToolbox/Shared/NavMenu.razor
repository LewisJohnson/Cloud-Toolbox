<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Cloud Toolbox</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3 mb-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3 mb-3">
            <input class="form-control rounded-1" placeholder="Search..." type="text" @bind-value="FilterText" @bind-value:event="oninput" @onkeyup="FilterMenuItems" />
        </div>

        @foreach (var item in FilteredMenuItems)
        {
            if (item.Type == MenuItemType.Link)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="@item.Href">
                        @item.Name
                    </NavLink>
                </div>
            } else
            {
                <div class="nav-item px-3 mt-3">
                    <span class="oi @item.HeaderIcon" aria-hidden="true"></span> <span class="h6">@item.Name</span>
                </div>
            }
        }
    </nav>
</div>

@code {
    public enum MenuItemType
    {
        Link = 0,
        Header = 1
    }

    public struct NavMenuItem
    {
        public string Name { get; }
        public string Href { get; }
        public string HeaderIcon { get; }
        public MenuItemType Type { get; }

        public NavMenuItem(string name, string href)
        {
            Name = name;
            Href = href;
            HeaderIcon = string.Empty;
        }

        public NavMenuItem(string name, MenuItemType type, string headerIcon)
        {
            Name = name;
            Href = string.Empty;
            Type = type;
            HeaderIcon = headerIcon;
        }
    }

    public List<NavMenuItem> FilteredMenuItems { get; set; }
    public string FilterText { get; set; }

    private List<NavMenuItem> MenuItems { get; }
    private bool collapseNavMenu = true;
    private bool hasSearched = false;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    public NavMenu()
    {
        MenuItems = new List<NavMenuItem>();

        CreateHeaderItem("Date & Time", "oi-timer");
        MenuItems.Add(new NavMenuItem($"Duration Between Days", $"toolbox/datetime/between-days"));
        MenuItems.Add(new NavMenuItem($"Duration Between Times", $"toolbox/datetime/between-times"));

        CreateHeaderItem("Text", "oi-text");
        MenuItems.Add(new NavMenuItem($"To Lower Case", $"toolbox/text/to-lower-case"));
        MenuItems.Add(new NavMenuItem($"To Upper Case", $"toolbox/text/to-upper-case"));
        MenuItems.Add(new NavMenuItem($"To Sentence/Title Case", $"toolbox/text/to-sentence-case"));

        CreateHeaderItem("Travel", "oi-globe");
        MenuItems.Add(new NavMenuItem($"MPG Calculator", $"toolbox/travel/mpg-Calculator"));
        MenuItems.Add(new NavMenuItem($"km/L Calculator", $"toolbox/travel/kml-Calculator"));
        MenuItems.Add(new NavMenuItem($"Required Fuel", $"toolbox/travel/mpg-Calculator"));

        CreateHeaderItem("Money", "oi-british-pound");
        MenuItems.Add(new NavMenuItem($"GBP to USD", $"toolbox/travel/mpg-Calculator"));

        CreateHeaderItem("Units", "oi-maths-compass");
        CreateViceVersaItem("units", "Kg", "Stone");
        CreateViceVersaItem("units", "Mph", "kph");
        CreateViceVersaItem("units", "Inch", "Cm");

        CreateHeaderItem("Maths", "oi-pie-chart");
        MenuItems.Add(new NavMenuItem($"Percentage Calculator", $"toolbox/maths/percentage-calculator"));
        MenuItems.Add(new NavMenuItem($"Time Tables", $"toolbox/maths/times-tables"));

        CreateHeaderItem("Developer", "oi-wrench");
        CreateToFromItem("dev", "Base64");
        CreateToFromItem("dev", "Hex");
        CreateToFromItem("dev", "Binary");

        FilteredMenuItems = MenuItems;
    }

    private void CreateViceVersaItem(string area, string unitA, string unitB)
    {
        MenuItems.Add(new NavMenuItem($"{unitA} to {unitB}", $"toolbox/{area}/{unitA}-to-{unitB}"));
        MenuItems.Add(new NavMenuItem($"{unitB} to {unitA}", $"toolbox/{area}/{unitB}-to-{unitA}"));
    }

    private void CreateToFromItem(string area, string name)
    {
        MenuItems.Add(new NavMenuItem($"To {name}", $"toolbox/{area}/to-{name.ToLower()}"));
        MenuItems.Add(new NavMenuItem($"From {name}", $"toolbox/{area}/from-{name.ToLower()}"));
    }

    private void CreateHeaderItem(string name, string icon)
    {
        MenuItems.Add(new NavMenuItem(name, MenuItemType.Header, icon));
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void FilterMenuItems()
    {
        if (FilterText != null && FilterText.Length > 0)
        {
            hasSearched = true;
            FilteredMenuItems = MenuItems.Where(x => x.Name.ToLower().Contains(FilterText.ToLower())).ToList();
        } else
        {
            if (hasSearched)
            {
                FilteredMenuItems = MenuItems;
                InvokeAsync(() =>
                   {

                       StateHasChanged();
                   });
            }

        }
    }
}
