@attribute [Route(Routes.DATE_AND_TIME_DURATION_BETWEEN_DAYS)]

@namespace CloudToolbox.Components.Toolbox.Dev

@using System.Text;
@using CloudToolbox.Data;
@using CloudToolbox.Common.Types;
@using CloudToolbox.Common.Enums;
@using CloudToolbox.Common.Routes;
@using CloudToolbox.Common.Models.Calculator;
@using CloudToolbox.Components.Toolbox.Shared;

<div class="row px-4 pt-5 calc-container" style="max-width: 800px; min-height: 100vh;">
    <div class="col-12 col-md-7">
        <NewToolboxHeader Title="Duration Between Two Dates">
            <Description>
                <p>
                    How many days, hours, minutes, and seconds are there between two dates?
                </p>
            </Description>
        </NewToolboxHeader>
    </div>

    <div class="col-12 col-md-5 shadow-sm pt-3 mb-5 calc-panel">
        <SimpleCalculator Inputs="Inputs" ResultsTemplate="ResultsTemplate" onChangeEvent="@OnChange"></SimpleCalculator>
    </div>

</div>

<style>
    .calc-container {
        padding-top: 5rem;
    }

    .calc-panel {
        background-color: #f2fff5;
    }

    h2 {
        background-color: #e5ffeb;
    }
</style>

@code {

    public List<CalculatorInput> Inputs { get; }

    public List<CalculatorResult> ResultsTemplate => new()
    {
        new CalculatorResult(null) { EndInputGroupText = "days" },
        new CalculatorResult(null) { EndInputGroupText = "hours" },
        new CalculatorResult(null) { EndInputGroupText = "minutes"},
        new CalculatorResult(null) { EndInputGroupText = "seconds"},
    };

    protected CalculatorInput StartDateInput => new("StartDate", typeof(DateTime)) { StartInputGroupText = "Start Date" };
    protected CalculatorInput EndDateInput => new("EndDate", typeof(DateTime)) { StartInputGroupText = "End Date" };
    protected CalculatorInput IncludeEndDateInput => new("Include End Date", typeof(Checkbox)) { EndInputGroupText = "Include End Date" };

    public BetweenDays()
    {
        Inputs = new List<CalculatorInput>()
        {
            StartDateInput,
            EndDateInput,
            IncludeEndDateInput
        };
    }

    private async Task<List<CalculatorResult>> OnChange(List<CalculatorInput> inputs)
    {
        var results = new List<CalculatorResult>();

        var startDate = (DateTime)inputs[0].InputDateTime;
        var endDate = (DateTime)inputs[1].InputDateTime;
        var includeEndDate = (bool)inputs[2].InputBool;

        TimeSpan ts = (endDate - startDate);

        if (includeEndDate)
        {
            ts = ts.Add(new TimeSpan(24, 0, 0));
        }

        results.Add(new(ts.TotalDays.ToString("#.##")) { EndInputGroupText = "days" });
        results.Add(new(ts.TotalHours.ToString("#.##")) { EndInputGroupText = "hours" });
        results.Add(new(ts.TotalMinutes.ToString("#.##")) { EndInputGroupText = "minutes" });
        results.Add(new(ts.TotalSeconds.ToString("#.##")) { EndInputGroupText = "seconds" });

        return results;
    }
}