
@inherits SimpleCalculatorBase

<div>
    @* INPUTS *@
    <div class="form-flush">
        @foreach (CalculatorInput input in Inputs)
        {
            if (input.IsStandardInput)
            {
                string formCssClass = "form-control " + (!input.IsValid && IsValidating? input.InvalidCssClass : "");

                @if (!string.IsNullOrEmpty(input.Label))
                {
                    <label class="form-label">@input.Label</label>
                }

                <div class="input-group">
                    @if (!string.IsNullOrEmpty(input.StartInputGroupText))
                    {
                        <span class="input-group-text" style="width: @(StartInputGroupWidth)px">@input.StartInputGroupText</span>
                    }

                    @if (input.Type == typeof(string))
                    {
                        if (input.UseLargeInput)
                        {
                            <textarea name="@input.Id" class="@formCssClass" @bind-value="input.InputString" @onchange="OnChange" @bind-value:event="oninput" />
                        }
                        else
                        {
                            <input name="@input.Id" class="@formCssClass" type="text" @bind-value="input.InputString" @onchange="OnChange" @bind-value:event="oninput" />
                        }

                    }
                    else if (input.Type == typeof(DateTime))
                    {
                        <input name="@input.Id" class="@formCssClass" type="date" @bind-value="input.InputDateTime" @onchange="OnChange" @bind-value:event="oninput" />
                    }
                    else if (input.Type == typeof(TimeOnly))
                    {
                        <input name="@input.Id" class="@formCssClass" type="time" @bind-value="input.InputTimeOnly" @onchange="OnChange" @bind-value:event="oninput" />
                    }

                    @if (!string.IsNullOrEmpty(input.EndInputGroupText))
                    {
                        <span class="input-group-text justify-content-end" style="width: @(EndInputGroupWidth)px">@input.EndInputGroupText</span>
                    }
                </div>
            }
            else
            {
                if (input.Type == typeof(Checkbox) || input.Type == typeof(bool))
                {
                    <div class="form-check mt-2">
                        <input name="@input.Id" class="form-check-input @(!input.IsValid && IsValidating ? input.InvalidCssClass : "")" type="checkbox" @bind-value="input.InputBool" @onchange="OnChange" @bind-value:event="oninput" />

                        <label class="form-check-label">@input.EndInputGroupText</label>
                    </div>
                }
            }
        }
    </div>

    <hr />

    @* RESULTS *@
    <div class="form-flush">
        @foreach (CalculatorResult res in Results)
        {
            @if (res.Type == CalculatorResultType.TextArea)
            {
                <div class="my-3">
                    @if (!string.IsNullOrEmpty(res.Label))
                    {
                        <label class="form-label">@res.Label</label>
                    }

                    <textarea class="form-control">@res.Value</textarea>
                </div>
            }
            else
            {
                <div class="input-group">
                    @if (!string.IsNullOrEmpty(res.Label))
                    {
                        <label class="form-label">@res.Label</label>
                    }
                    @if (!string.IsNullOrEmpty(res.StartInputGroupText))
                    {
                        <span class="input-group-text" style="width: @(ResultStartInputGroupWidth)px">@res.StartInputGroupText</span>
                    }

                    <input class="form-control" type="text" value="@res.Value" />

                    @if (!string.IsNullOrEmpty(res.EndInputGroupText))
                    {
                        <span class="input-group-text justify-content-end" style="width: @(ResultEndInputGroupWidth)px">@res.EndInputGroupText</span>
                    }
                </div>
            }

        }
    </div>
</div>
